openapi: 3.0.3
info:
  title: Backend & Data Portfolio 2025 — Orders & Inventory API
  version: 1.0.0
  description: Documentación OpenAPI 3 generada automáticamente (DJANGO + DRF)
paths:
  /api/customers/:
    get:
      operationId: api_customers_list
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Qué campo usar para ordenar los resultados.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: Un número de página dentro del conjunto de resultados paginado.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: Un término de búsqueda.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCustomerList'
          description: ''
    post:
      operationId: api_customers_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Customer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
  /api/customers/{id}/:
    get:
      operationId: api_customers_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Un valor de entero único que identifique este customer.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
    put:
      operationId: api_customers_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Un valor de entero único que identifique este customer.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Customer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
    patch:
      operationId: api_customers_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Un valor de entero único que identifique este customer.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomer'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
    delete:
      operationId: api_customers_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Un valor de entero único que identifique este customer.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/orders/:
    get:
      operationId: api_orders_list
      parameters:
      - in: query
        name: customer
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Qué campo usar para ordenar los resultados.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: Un número de página dentro del conjunto de resultados paginado.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: Un término de búsqueda.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - CANCELLED
          - PAID
          - PENDING
          - SHIPPED
        description: |-
          * `PENDING` - Pendiente
          * `PAID` - Pagado
          * `SHIPPED` - Enviado
          * `CANCELLED` - Cancelado
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
    post:
      operationId: api_orders_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/orders/{id}/:
    get:
      operationId: api_orders_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Un valor de entero único que identifique este order.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: api_orders_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Un valor de entero único que identifique este order.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: api_orders_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Un valor de entero único que identifique este order.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: api_orders_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Un valor de entero único que identifique este order.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/products/:
    get:
      operationId: api_products_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Qué campo usar para ordenar los resultados.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: Un número de página dentro del conjunto de resultados paginado.
        schema:
          type: integer
      - in: query
        name: price
        schema:
          type: number
      - name: search
        required: false
        in: query
        description: Un término de búsqueda.
        schema:
          type: string
      - in: query
        name: sku
        schema:
          type: string
      - in: query
        name: stock
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
  /api/products/{id}/:
    get:
      operationId: api_products_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Un valor de entero único que identifique este product.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 120
        email:
          type: string
          format: email
          maxLength: 254
        phone:
          type: string
          maxLength: 20
      required:
      - email
      - id
      - name
      - phone
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        customer:
          type: integer
        status:
          $ref: '#/components/schemas/StatusEnum'
        subtotal:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        total:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemWrite'
          writeOnly: true
        items_detail:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRead'
          readOnly: true
      required:
      - created_at
      - customer
      - id
      - items
      - items_detail
      - subtotal
      - total
    OrderItemRead:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        quantity:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        unit_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        line_total:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
      required:
      - id
      - line_total
      - product
      - quantity
    OrderItemWrite:
      type: object
      properties:
        product:
          type: integer
        quantity:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        unit_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
      required:
      - product
      - quantity
    PaginatedCustomerList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
    PaginatedOrderList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    PaginatedProductList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PatchedCustomer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 120
        email:
          type: string
          format: email
          maxLength: 254
        phone:
          type: string
          maxLength: 20
    PatchedOrder:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        customer:
          type: integer
        status:
          $ref: '#/components/schemas/StatusEnum'
        subtotal:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        total:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemWrite'
          writeOnly: true
        items_detail:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRead'
          readOnly: true
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        sku:
          type: string
          maxLength: 30
        name:
          type: string
          maxLength: 120
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
      required:
      - id
      - name
      - price
      - sku
    StatusEnum:
      enum:
      - PENDING
      - PAID
      - SHIPPED
      - CANCELLED
      type: string
      description: |-
        * `PENDING` - Pendiente
        * `PAID` - Pagado
        * `SHIPPED` - Enviado
        * `CANCELLED` - Cancelado
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
